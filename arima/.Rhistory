# MAA
# MAM
# MMA
hw = ets(gala_ts, model = "MMA")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMA
# MMM
hw = ets(gala_ts, model = "MAM")
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMA
# MMM
hw = ets(gala_ts, model = "MMA")
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "MAA")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "MMM")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AMM")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AAM")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AAA")
hw.pred = predict(hw, 31)
plot(hw.pred)
# additive trend # first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "ZZZ")
hw.pred = predict(hw, 31)
plot(hw.pred)
decomp_gala = decompose(gala_ts, type="additive")
plot(decomp_gala)
decomp_gala = decompose(gala_ts, type="multiplicative")
plot(decomp_gala)
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AAM")
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AMA")
hw.pred = predict(hw, 31)
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AAA")
hw.pred = predict(hw, 31)
plot(hw.pred)
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw = ets(gala_ts, model = "AMM")
hw.pred = predict(hw, 31)
plot(hw.pred)
hw = ets(gala_ts, model = "MAZ")
hw.pred = predict(hw, 31)
plot(hw.pred)
decomp_gala = decompose(gala_ts, type="multiplicative")
plot(decomp_gala)
hw_maa = ets(gala_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
plot(hw_maa.pred)
library(readxl)
library(latex2exp)
training_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=3)
val_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=1)
training_set = training_set[c("Date", "Site", "RPM")]
val_set = val_set[c("Date", "Site", "RPM")]
gala_val = subset(val_set, Site=="gala", select=c("Date", "RPM"))
gala_val_ts = ts(data = gala_val$RPM)
ts.eval(gala_val_ts, hw_maa.pred, stats=c("rmse", "mape"))
ets.eval(gala_val_ts, hw_maa.pred, stats=c("rmse", "mape"))
library(Metrics)
accuracy(hw_maa.pred, gala_val_ts)
hw_mam = ets(gala_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
plot(hw_mam.pred)
accuracy(hw_maa.pred, gala_val_ts)
accuracy(hw_mam.pred, gala_val_ts)
hw_mmm = ets(gala_ts, model = "MMM")
hw_mmm.pred = predict(hw_mmm, 31)
plot(hw_mmm.pred)
accuracy(hw_maa.pred, gala_val_ts)
accuracy(hw_mam.pred, gala_val_ts)
accuracy(hw_mmm.pred, gala_val_ts)
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)$RMSE, accuracy(hw_mam.pred, gala_val_ts)$RMSE,
accuracy(hw_mmm.pred, gala_val_ts)$RMSE)
gala_rmse
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)["RMSE"], accuracy(hw_mam.pred, gala_val_ts)["RMSE"],
accuracy(hw_mmm.pred, gala_val_ts)["RMSE"])
gala_rmse
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)[["RMSE"]], accuracy(hw_mam.pred, gala_val_ts)["RMSE"],
accuracy(hw_mmm.pred, gala_val_ts)["RMSE"])
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)[2], accuracy(hw_mam.pred, gala_val_ts)[2],
accuracy(hw_mmm.pred, gala_val_ts)[2])
gala_rmse
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)[1], accuracy(hw_mam.pred, gala_val_ts)[1],
accuracy(hw_mmm.pred, gala_val_ts)[1])
gala_rmse
gala_rmse = c(accuracy(hw_maa.pred, gala_val_ts)[2, 2], accuracy(hw_mam.pred, gala_val_ts)[2, 2],
accuracy(hw_mmm.pred, gala_val_ts)[2, 2])
gala_rmse
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double())
rmse_df
gala_rmse = c("gala", accuracy(hw_maa.pred, gala_val_ts)[2, 2], accuracy(hw_mam.pred, gala_val_ts)[2, 2],
accuracy(hw_mmm.pred, gala_val_ts)[2, 2])
gala_rmse
rmse_df = rbind(rmse_df, gala_rmse)
rmse_df
help(data.frame)
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
rmse_df = rbind(rmse_df, gala_rmse)
rmse_df
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
rmse_df[nrow(rmse_df)+1,] = gala_rmse
rmse_df
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
#rmse_df[nrow(rmse_df)+1,] = gala_rmse
#rmse_df
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_ts = ts(data = subset_train$RPM, frequency=7)
hw_maa = ets(subset_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
#plot(hw_maa.pred)
hw_mam = ets(subset_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
#plot(hw_mam.pred)
hw_mmm = ets(subset_ts, model = "MMM")
hw_mmm.pred = predict(hw_mmm, 31)
#plot(hw_mmm.pred)
# calculate RMSE
site_val = subset(val_set, Site==site, select=c("Date", "RPM"))
site_val_ts = ts(data = site_val$RPM)
site_rmse = c(site, accuracy(hw_maa.pred, site_val_ts)[2, 2], accuracy(hw_mam.pred, site_val_ts)[2, 2],
accuracy(hw_mmm.pred, site_val_ts)[2, 2])
rmse_df[nrow(rmse_df)+1,] = site_rmse
}
rmse_df
write.csv(rmse_df, "lissage_rmse.csv")
hw_maa = ets(gala_ts, model = "AAA")
hw_maa = ets(gala_ts, model = "AAM")
hw_maa = ets(gala_ts, model = "AMA")
hw_maa = ets(gala_ts, model = "AMM")
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
aaa=double()
stringsAsFactors = F)
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_ts = ts(data = subset_train$RPM, frequency=7)
hw_maa = ets(subset_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
#plot(hw_maa.pred)
hw_mam = ets(subset_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
#plot(hw_mam.pred)
hw_mmm = ets(subset_ts, model = "MMM")
hw_mmm.pred = predict(hw_mmm, 31)
#plot(hw_mmm.pred)
hw_aaa = ets(subset_ts, model = "AAA")
hw_aaa.pred = predict(hw_aaa, 31)
#plot(hw_aaa.pred)
# calculate RMSE
site_val = subset(val_set, Site==site, select=c("Date", "RPM"))
site_val_ts = ts(data = site_val$RPM)
site_rmse = c(site, accuracy(hw_maa.pred, site_val_ts)[2, 2], accuracy(hw_mam.pred, site_val_ts)[2, 2],
accuracy(hw_mmm.pred, site_val_ts)[2, 2], accuracy(hw_aaa.pred, site_val_ts)[2, 2])
rmse_df[nrow(rmse_df)+1,] = site_rmse
}
rmse_df
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
aaa=double(),
stringsAsFactors = F)
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_ts = ts(data = subset_train$RPM, frequency=7)
hw_maa = ets(subset_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
#plot(hw_maa.pred)
hw_mam = ets(subset_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
#plot(hw_mam.pred)
hw_mmm = ets(subset_ts, model = "MMM")
hw_mmm.pred = predict(hw_mmm, 31)
#plot(hw_mmm.pred)
hw_aaa = ets(subset_ts, model = "AAA")
hw_aaa.pred = predict(hw_aaa, 31)
#plot(hw_aaa.pred)
# calculate RMSE
site_val = subset(val_set, Site==site, select=c("Date", "RPM"))
site_val_ts = ts(data = site_val$RPM)
site_rmse = c(site, accuracy(hw_maa.pred, site_val_ts)[2, 2], accuracy(hw_mam.pred, site_val_ts)[2, 2],
accuracy(hw_mmm.pred, site_val_ts)[2, 2], accuracy(hw_aaa.pred, site_val_ts)[2, 2])
rmse_df[nrow(rmse_df)+1,] = site_rmse
}
rmse_df
write.csv(rmse_df, "lissage_rmse.csv")
help(ets)
hw_mmm = ets(gala_ts, model = "MMA")
decomp_gala = decompose(gala_ts, type="multiplicative")
plot(decomp_gala)
decomp_gala = decompose(gala_ts, type="additive")
plot(decomp_gala)
geo_train = subset(training_set, Site=="geo", select=c("Date", "RPM"))
geo_ts = ts(data = geo_train$RPM, frequency=7)
decomp_geo = decompose(geo_ts, type="additive")
plot(decomp_geo)
decomp_geo = decompose(geo_ts, type="multiplicative")
plot(decomp_geo)
hw_maa = ets(gala_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
summary(hw_maa)
plot(hw_maa.pred)
library(readxl)
library(latex2exp)
training_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=3)
val_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=1)
training_set = training_set[c("Date", "Site", "RPM")]
val_set = val_set[c("Date", "Site", "RPM")]
gala_train = subset(training_set, Site=="gala", select=c("Date", "RPM"))
gala_ts = ts(data = gala_train$RPM, frequency=7)
decomp_gala = decompose(gala_ts, type="additive")
plot(decomp_gala)
geo_train = subset(training_set, Site=="geo", select=c("Date", "RPM"))
geo_ts = ts(data = geo_train$RPM, frequency=7)
decomp_geo = decompose(geo_ts, type="multiplicative")
plot(decomp_geo)
library(forecast)
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw_maa = ets(gala_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
summary(hw_maa)
plot(hw_maa.pred)
checkresiduals(hw_maa)
summary(hw_maa)$AIC
summary(hw_maa)["AIC"]
AIC(hw_maa)
BIC(hw_maa)
library(readxl)
library(latex2exp)
training_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=3)
val_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=1)
training_set = training_set[c("Date", "Site", "RPM")]
val_set = val_set[c("Date", "Site", "RPM")]
gala_train = subset(training_set, Site=="gala", select=c("Date", "RPM"))
gala_ts = ts(data = gala_train$RPM, frequency=7)
decomp_gala = decompose(gala_ts, type="additive")
plot(decomp_gala)
geo_train = subset(training_set, Site=="geo", select=c("Date", "RPM"))
geo_ts = ts(data = geo_train$RPM, frequency=7)
decomp_geo = decompose(geo_ts, type="multiplicative")
plot(decomp_geo)
library(forecast)
# first letter: M # second: M or A # third: M or A
# MAA
# MAM
# MMM
hw_maa = ets(gala_ts, model = "MAA")
# checkresiduals(hw_maa)
hw_maa.pred = predict(hw_maa, 31)
plot(hw_maa.pred)
#summary(hw_maa)
#AIC(hw_maa)
#BIC(hw_maa)
hw_mam = ets(gala_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
plot(hw_mam.pred)
hw_mmm = ets(gala_ts, model = "MMA")
hw_mmm.pred = predict(hw_mmm, 31)
plot(hw_mmm.pred)
# calculate RMSE
gala_val = subset(val_set, Site=="gala", select=c("Date", "RPM"))
gala_val_ts = ts(data = gala_val$RPM)
accuracy(hw_maa.pred, gala_val_ts)
accuracy(hw_mam.pred, gala_val_ts)
accuracy(hw_mmm.pred, gala_val_ts)
gala_rmse = c("gala", accuracy(hw_maa.pred, gala_val_ts)[2, 2], accuracy(hw_mam.pred, gala_val_ts)[2, 2],
accuracy(hw_mmm.pred, gala_val_ts)[2, 2])
gala_rmse
# create dataframe that store accuracy
rmse_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
aic_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
bic_df = data.frame(site=character(),
maa=double(),
mam=double(),
mmm=double(),
stringsAsFactors = F)
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_ts = ts(data = subset_train$RPM, frequency=7)
hw_maa = ets(subset_ts, model = "MAA")
hw_maa.pred = predict(hw_maa, 31)
#plot(hw_maa.pred)
hw_mam = ets(subset_ts, model = "MAM")
hw_mam.pred = predict(hw_mam, 31)
#plot(hw_mam.pred)
hw_mmm = ets(subset_ts, model = "MMM")
hw_mmm.pred = predict(hw_mmm, 31)
#plot(hw_mmm.pred)
# calculate RMSE
site_val = subset(val_set, Site==site, select=c("Date", "RPM"))
site_val_ts = ts(data = site_val$RPM)
site_aic = c(site, AIC(hw_maa), AIC(hw_mam), AIC(hw_mmm))
aic_df[nrow(aic_df)+1,] = site_aic
site_bic = c(site, BIC(hw_maa), BIC(hw_mam), BIC(hw_mmm))
bic_df[nrow(bic_df)+1,] = site_bic
site_rmse = c(site, accuracy(hw_maa.pred, site_val_ts)[2, 2], accuracy(hw_mam.pred, site_val_ts)[2, 2],
accuracy(hw_mmm.pred, site_val_ts)[2, 2])
rmse_df[nrow(rmse_df)+1,] = site_rmse
}
write.csv(aic_df, "lissage_aic.csv")
write.csv(bic_df, "lissage_bic.csv")
write.csv(rmse_df, "lissage_rmse.csv")
library(readxl)
library(latex2exp)
training_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=3)
test_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=1)
training_set = training_set[c("Date", "Site", "RPM")]
test_set = test_set[c("Date", "Site", "RPM")]
View(training_set)
#install.packages("xts")
library("xts")
nlag = 36 # nombre de lag maxi pour les plots
sais = 7 # saiso hebdo
# modèle additif
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
# modèle multiplicative
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
subset_ts_log = log(subset_ts)
acf = acf(subset_ts_log, lag.max=nlag, plot=FALSE, ylim=c(-1,1))
acf$lag = acf$lag
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=TeX(paste(c("log(", site, ")"), collapse="")))
}
library(readxl)
library(latex2exp)
training_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=3)
val_set <- read_excel("~/MSc Data Management/Thèse professionnelle/ORION_04_Site.xlsx", sheet=1)
training_set = training_set[c("Date", "Site", "RPM")]
val_set = val_set[c("Date", "Site", "RPM")]
View(training_set)
#install.packages("xts")
library("xts")
nlag = 36 # nombre de lag maxi pour les plots
sais = 7 # saiso hebdo
## modèle additif
sites = c("business insider", "ca m'intéresse", "capital", "ce soir tv",
"cuisine actuelle", "femme actuelle", "gala", "geo", "neon",
"télé 2 semaines", "télé loisirs", "voici")
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
y_dif_1 = diff(subset_ts, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1))
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=paste(site, ": Série différenciée"))
}
# série différenciée
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
y_dif_1 = diff(subset_ts, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1))
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=paste(site, ": Série différenciée"))
}
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
y_dif_1 = diff(subset_ts, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1))
# série différenciée
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
y_dif_1 = diff(subset_ts, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1), na.action = na.pass)
acf$lag = acf$lag*sais
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=paste(site, ": Série différenciée"))
}
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
y_dif_1 = diff(subset_ts, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1), na.action = na.pass)
acf$lag = acf$lag
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=paste(site, ": Série différenciée"))
}
for (site in sites)
{
subset_train = subset(training_set, Site==site, select=c("Date", "RPM"))
subset_train$Date = as.Date(subset_train$Date, "%Y - %m - %d")
subset_ts = xts(subset_train$RPM, subset_train$Date)
subset_ts_log = log(subset_ts)
y_dif_1 = diff(subset_ts_log, lag=1, differences=1)
acf = acf(y_dif_1, lag.max=nlag, plot=FALSE, ylim=c(-1,1), na.action = na.pass)
acf$lag = acf$lag
plot(acf, ci=0.05, xlim=c(2, nlag-1), ylim=c(-1,1), xaxp=c(1, nlag, nlag-1),
type="h", lend="butt", lwd=5, xlab="t", ylab="ACF",
main=paste(site, ": série différenciée"))
}
